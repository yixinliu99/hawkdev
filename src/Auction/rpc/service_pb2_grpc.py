# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import Auction.rpc.service_pb2 as service__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuctionServiceStub(object):
    """
    Allow listing of items for bidding
    Start the auction when the current time matches the start time defined by the user
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAuction = channel.unary_unary(
                '/AuctionService/CreateAuction',
                request_serializer=service__pb2.CreateAuctionRequest.SerializeToString,
                response_deserializer=service__pb2.CreateAuctionResponse.FromString,
                _registered_method=True)
        self.UpdateAuction = channel.unary_unary(
                '/AuctionService/UpdateAuction',
                request_serializer=service__pb2.UpdateAuctionRequest.SerializeToString,
                response_deserializer=service__pb2.UpdateAuctionResponse.FromString,
                _registered_method=True)
        self.StartAuction = channel.unary_unary(
                '/AuctionService/StartAuction',
                request_serializer=service__pb2.StartAuctionRequest.SerializeToString,
                response_deserializer=service__pb2.StartAuctionResponse.FromString,
                _registered_method=True)
        self.StopAuction = channel.unary_unary(
                '/AuctionService/StopAuction',
                request_serializer=service__pb2.StopAuctionRequest.SerializeToString,
                response_deserializer=service__pb2.StopAuctionResponse.FromString,
                _registered_method=True)
        self.PlaceBid = channel.unary_unary(
                '/AuctionService/PlaceBid',
                request_serializer=service__pb2.PlaceBidRequest.SerializeToString,
                response_deserializer=service__pb2.PlaceBidResponse.FromString,
                _registered_method=True)
        self.GetAuctions = channel.unary_unary(
                '/AuctionService/GetAuctions',
                request_serializer=service__pb2.GetAuctionRequest.SerializeToString,
                response_deserializer=service__pb2.GetAuctionResponse.FromString,
                _registered_method=True)
        self.BuyItemNow = channel.unary_unary(
                '/AuctionService/BuyItemNow',
                request_serializer=service__pb2.BuyItemNowRequest.SerializeToString,
                response_deserializer=service__pb2.BuyItemNowResponse.FromString,
                _registered_method=True)


class AuctionServiceServicer(object):
    """
    Allow listing of items for bidding
    Start the auction when the current time matches the start time defined by the user
    """

    def CreateAuction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAuction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartAuction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopAuction(self, request, context):
        """
        Remove auction once bidding is complete and user checkouts out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlaceBid(self, request, context):
        """
        Allow bid to be placed, and increment bid amount as users enter new bids
        Allow multiple bids to be placed at once by different users
        Bid on an item, and update that bid if another user outbids that user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAuctions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuyItemNow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuctionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAuction': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAuction,
                    request_deserializer=service__pb2.CreateAuctionRequest.FromString,
                    response_serializer=service__pb2.CreateAuctionResponse.SerializeToString,
            ),
            'UpdateAuction': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAuction,
                    request_deserializer=service__pb2.UpdateAuctionRequest.FromString,
                    response_serializer=service__pb2.UpdateAuctionResponse.SerializeToString,
            ),
            'StartAuction': grpc.unary_unary_rpc_method_handler(
                    servicer.StartAuction,
                    request_deserializer=service__pb2.StartAuctionRequest.FromString,
                    response_serializer=service__pb2.StartAuctionResponse.SerializeToString,
            ),
            'StopAuction': grpc.unary_unary_rpc_method_handler(
                    servicer.StopAuction,
                    request_deserializer=service__pb2.StopAuctionRequest.FromString,
                    response_serializer=service__pb2.StopAuctionResponse.SerializeToString,
            ),
            'PlaceBid': grpc.unary_unary_rpc_method_handler(
                    servicer.PlaceBid,
                    request_deserializer=service__pb2.PlaceBidRequest.FromString,
                    response_serializer=service__pb2.PlaceBidResponse.SerializeToString,
            ),
            'GetAuctions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuctions,
                    request_deserializer=service__pb2.GetAuctionRequest.FromString,
                    response_serializer=service__pb2.GetAuctionResponse.SerializeToString,
            ),
            'BuyItemNow': grpc.unary_unary_rpc_method_handler(
                    servicer.BuyItemNow,
                    request_deserializer=service__pb2.BuyItemNowRequest.FromString,
                    response_serializer=service__pb2.BuyItemNowResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AuctionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('AuctionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuctionService(object):
    """
    Allow listing of items for bidding
    Start the auction when the current time matches the start time defined by the user
    """

    @staticmethod
    def CreateAuction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AuctionService/CreateAuction',
            service__pb2.CreateAuctionRequest.SerializeToString,
            service__pb2.CreateAuctionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAuction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AuctionService/UpdateAuction',
            service__pb2.UpdateAuctionRequest.SerializeToString,
            service__pb2.UpdateAuctionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartAuction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AuctionService/StartAuction',
            service__pb2.StartAuctionRequest.SerializeToString,
            service__pb2.StartAuctionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopAuction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AuctionService/StopAuction',
            service__pb2.StopAuctionRequest.SerializeToString,
            service__pb2.StopAuctionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlaceBid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AuctionService/PlaceBid',
            service__pb2.PlaceBidRequest.SerializeToString,
            service__pb2.PlaceBidResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAuctions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AuctionService/GetAuctions',
            service__pb2.GetAuctionRequest.SerializeToString,
            service__pb2.GetAuctionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BuyItemNow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AuctionService/BuyItemNow',
            service__pb2.BuyItemNowRequest.SerializeToString,
            service__pb2.BuyItemNowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
