# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import admin.admin_rpc.admin_service_pb2 as admin__service__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in admin_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AdminServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StopAuctionEarly = channel.unary_unary(
                '/admin.AdminService/StopAuctionEarly',
                request_serializer=admin__service__pb2.AuctionRequest.SerializeToString,
                response_deserializer=admin__service__pb2.Response.FromString,
                _registered_method=True)
        self.RemoveAndBlockUser = channel.unary_unary(
                '/admin.AdminService/RemoveAndBlockUser',
                request_serializer=admin__service__pb2.UserRequest.SerializeToString,
                response_deserializer=admin__service__pb2.Response.FromString,
                _registered_method=True)
        self.AddModifyRemoveCategory = channel.unary_unary(
                '/admin.AdminService/AddModifyRemoveCategory',
                request_serializer=admin__service__pb2.CategoryRequest.SerializeToString,
                response_deserializer=admin__service__pb2.Response.FromString,
                _registered_method=True)
        self.ViewFlaggedItems = channel.unary_unary(
                '/admin.AdminService/ViewFlaggedItems',
                request_serializer=admin__service__pb2.Empty.SerializeToString,
                response_deserializer=admin__service__pb2.FlaggedItemsResponse.FromString,
                _registered_method=True)
        self.ViewActiveAuctions = channel.unary_unary(
                '/admin.AdminService/ViewActiveAuctions',
                request_serializer=admin__service__pb2.SortingRequest.SerializeToString,
                response_deserializer=admin__service__pb2.ActiveAuctionsResponse.FromString,
                _registered_method=True)
        self.ExamineMetrics = channel.unary_unary(
                '/admin.AdminService/ExamineMetrics',
                request_serializer=admin__service__pb2.MetricsRequest.SerializeToString,
                response_deserializer=admin__service__pb2.ActiveAuctionsResponse.FromString,
                _registered_method=True)
        self.RespondToEmails = channel.unary_unary(
                '/admin.AdminService/RespondToEmails',
                request_serializer=admin__service__pb2.EmailRequest.SerializeToString,
                response_deserializer=admin__service__pb2.Response.FromString,
                _registered_method=True)
        self.ViewUnrespondedEmails = channel.unary_unary(
                '/admin.AdminService/ViewUnrespondedEmails',
                request_serializer=admin__service__pb2.Empty.SerializeToString,
                response_deserializer=admin__service__pb2.UnrespondedEmailsResponse.FromString,
                _registered_method=True)


class AdminServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StopAuctionEarly(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveAndBlockUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddModifyRemoveCategory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewFlaggedItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewActiveAuctions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExamineMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondToEmails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewUnrespondedEmails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StopAuctionEarly': grpc.unary_unary_rpc_method_handler(
                    servicer.StopAuctionEarly,
                    request_deserializer=admin__service__pb2.AuctionRequest.FromString,
                    response_serializer=admin__service__pb2.Response.SerializeToString,
            ),
            'RemoveAndBlockUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveAndBlockUser,
                    request_deserializer=admin__service__pb2.UserRequest.FromString,
                    response_serializer=admin__service__pb2.Response.SerializeToString,
            ),
            'AddModifyRemoveCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.AddModifyRemoveCategory,
                    request_deserializer=admin__service__pb2.CategoryRequest.FromString,
                    response_serializer=admin__service__pb2.Response.SerializeToString,
            ),
            'ViewFlaggedItems': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewFlaggedItems,
                    request_deserializer=admin__service__pb2.Empty.FromString,
                    response_serializer=admin__service__pb2.FlaggedItemsResponse.SerializeToString,
            ),
            'ViewActiveAuctions': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewActiveAuctions,
                    request_deserializer=admin__service__pb2.SortingRequest.FromString,
                    response_serializer=admin__service__pb2.ActiveAuctionsResponse.SerializeToString,
            ),
            'ExamineMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.ExamineMetrics,
                    request_deserializer=admin__service__pb2.MetricsRequest.FromString,
                    response_serializer=admin__service__pb2.ActiveAuctionsResponse.SerializeToString,
            ),
            'RespondToEmails': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondToEmails,
                    request_deserializer=admin__service__pb2.EmailRequest.FromString,
                    response_serializer=admin__service__pb2.Response.SerializeToString,
            ),
            'ViewUnrespondedEmails': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewUnrespondedEmails,
                    request_deserializer=admin__service__pb2.Empty.FromString,
                    response_serializer=admin__service__pb2.UnrespondedEmailsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'admin.AdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('admin.AdminService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AdminService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StopAuctionEarly(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/admin.AdminService/StopAuctionEarly',
            admin__service__pb2.AuctionRequest.SerializeToString,
            admin__service__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveAndBlockUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/admin.AdminService/RemoveAndBlockUser',
            admin__service__pb2.UserRequest.SerializeToString,
            admin__service__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddModifyRemoveCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/admin.AdminService/AddModifyRemoveCategory',
            admin__service__pb2.CategoryRequest.SerializeToString,
            admin__service__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ViewFlaggedItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/admin.AdminService/ViewFlaggedItems',
            admin__service__pb2.Empty.SerializeToString,
            admin__service__pb2.FlaggedItemsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ViewActiveAuctions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/admin.AdminService/ViewActiveAuctions',
            admin__service__pb2.SortingRequest.SerializeToString,
            admin__service__pb2.ActiveAuctionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExamineMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/admin.AdminService/ExamineMetrics',
            admin__service__pb2.MetricsRequest.SerializeToString,
            admin__service__pb2.ActiveAuctionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RespondToEmails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/admin.AdminService/RespondToEmails',
            admin__service__pb2.EmailRequest.SerializeToString,
            admin__service__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ViewUnrespondedEmails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/admin.AdminService/ViewUnrespondedEmails',
            admin__service__pb2.Empty.SerializeToString,
            admin__service__pb2.UnrespondedEmailsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
